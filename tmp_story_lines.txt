"use client"

import { useEffect, useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Separator } from '@/components/ui/separator'
import { toast } from '@/hooks/use-toast'
import { cn } from '@/lib/utils'
import { Loader2, History, Wand2, Lightbulb, Dice5 } from 'lucide-react'
import Link from 'next/link'

type Scene = { beat: string; visual: string; aksi: string; dialog: string; audio: string; exit: string; transisi: string }

export default function StorypromptPage() {
  const [genre, setGenre] = useState('Dongeng')
  const [ageGroup, setAgeGroup] = useState('4-6')
  const [language, setLanguage] = useState<'ID'|'EN'|'JV'|'ES'|'FR'|'ZH'|'DE'|'AR'>('ID')
  const [promptLanguage, setPromptLanguage] = useState<'JSON'|'EN'|'ID'>('JSON')
  const [storyIdea, setStoryIdea] = useState('')
  const [characterDesc, setCharacterDesc] = useState('')
  const [moralLesson, setMoralLesson] = useState('')
  const [numScenes, setNumScenes] = useState(8)

  const [loading, setLoading] = useState(false)
  const [scenes, setScenes] = useState<Scene[]>([])
  const [analysisOpen, setAnalysisOpen] = useState(false)
  const [analysis, setAnalysis] = useState<any | null>(null)
  const [scriptOpen, setScriptOpen] = useState(false)
  const [scriptText, setScriptText] = useState('')
  const [sceneDialogOpen, setSceneDialogOpen] = useState(false)
  const [selectedScene, setSelectedScene] = useState<Scene | null>(null)
  const [sceneDialogText, setSceneDialogText] = useState('')

  const callApi = async (path: string, payload: any) => {
    const res = await fetch(path, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) })
    const json = await res.json()
    if (!res.ok) throw new Error(json.error || 'API error')
    return json
  }

  const handleRandomIdea = () => {
    const ideas = [
      'Anak gajah yang takut air belajar berenang.',
      'Kupu-kupu pemalu yang mencari teman di taman bunga.',
      'Robot kecil tersesat di kota besar, dibantu merpati.',
      'Pensil ajaib yang menggambar apapun jadi nyata.',
      'Awan kecil ingin melihat dunia dari bawah.',
    ]
    setStoryIdea(ideas[Math.floor(Math.random()*ideas.length)])
  }

  const handleDevelop = async () => {
    if (!storyIdea.trim()) return toast({ variant: 'destructive', title: 'Lengkapi data', description: 'Jelaskan ide plot terlebih dahulu.' })
    setLoading(true)
    try {
      const { result } = await callApi('/api/story/develop', { storyIdea })
      setStoryIdea(result.plot || storyIdea)
      setCharacterDesc(result.characters || characterDesc)
      setMoralLesson(result.moral || moralLesson)
      toast({ title: 'Berhasil', description: 'Ide dikembangkan oleh AI.' })
    } catch (e: any) {
      toast({ variant: 'destructive', title: 'Gagal', description: e?.message || 'Gagal mengembangkan ide.' })
    } finally { setLoading(false) }
  }

  const handleGenerate = async () => {
    if (!storyIdea.trim()) return toast({ variant: 'destructive', title: 'Lengkapi data', description: 'Jelaskan ide plot terlebih dahulu.' })
    setLoading(true)
    setScenes([])
    try {
      const { scenes: list } = await callApi('/api/story/generate', { genre, ageGroup, language, promptLanguage, storyIdea, characterDesc, moralLesson, numScenes })
      if (!Array.isArray(list) || !list.length) throw new Error('AI tidak mengembalikan hasil.')
      setScenes(list)
      // log history
      try {
        await fetch('/api/history', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ tool_key: 'storyprompt', subject: 'Story', grade: ageGroup, style: genre, topic: storyIdea, story: characterDesc, negative: '', scene_count: list.length, model: 'gemini-2.5-flash', response_json: { scenes: list } }) })
      } catch {}
    } catch (e: any) {
      toast({ variant: 'destructive', title: 'Gagal', description: e?.message || 'Gagal membuat prompt.' })
    } finally { setLoading(false) }
  }

  const handleAnalyze = async () => {
    if (!storyIdea.trim()) return toast({ variant: 'destructive', title: 'Lengkapi data', description: 'Jelaskan ide plot terlebih dahulu.' })
    setAnalysis(null)
    setAnalysisOpen(true)
    try {
      const { analysis } = await callApi('/api/story/analyze', { genre, ageGroup, storyIdea, characterDesc, moralLesson })
      setAnalysis(analysis)
    } catch (e: any) {
      setAnalysis({ error: e?.message || 'Gagal menganalisis.' })
    }
  }

  const handleScript = async () => {
    if (!storyIdea.trim()) return toast({ variant: 'destructive', title: 'Lengkapi data', description: 'Jelaskan ide plot terlebih dahulu.' })
    setScriptOpen(true)
    setScriptText('')
    try {
      const { script } = await callApi('/api/story/script', { genre, ageGroup, storyIdea, characterDesc, moralLesson })
      setScriptText(script || '')
    } catch (e: any) {
      setScriptText(`Gagal membuat naskah: ${e?.message || ''}`)
    }
  }

  const buildSceneText = (s: Scene): string => [
    `Beat: ${s.beat}`,
    `Visual: ${s.visual}`,
    `Aksi: ${s.aksi}`,
    `Dialog: ${s.dialog || '-'}`,
    `Audio: ${s.audio}`,
    `Exit: ${s.exit}`,
    `Transisi: ${s.transisi}`,
  ].join('\n')

  const stat = (label: string, value: string) => (
    <div className="rounded-xl border bg-emerald-50 p-3 text-center">
      <div className="text-xs text-muted-foreground">{label}</div>
      <div className="text-xl font-semibold text-emerald-700">{value}</div>
    </div>
  )

  return (
    <section className="relative">
      <div className="absolute inset-0 -z-10 bg-gradient-to-b from-purple-600/15 via-blue-600/10 to-background" />
      <div className="mx-auto max-w-6xl px-4 py-10">
        <div className="mb-6 text-center">
          <div className="inline-block rounded-2xl bg-card p-4 shadow">
            <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-blue-600">Story Prompt Generator</h1>
          </div>
          <p className="mt-3 text-muted-foreground">Buat outline cerita animasi anak.</p>
        </div>

        <div className="grid gap-6 lg:grid-cols-5">
          {/* Kiri */}
          <Card className="lg:col-span-2">
            <CardHeader><CardTitle>Pengaturan Prompt</CardTitle></CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="mb-2 block text-sm font-medium">Pilih Genre</label>
                <div className="grid grid-cols-3 gap-2">
                  {['Dongeng','Petualangan','Fabel','Cerita Legenda','Humor Anak','Cerita bergambar'].map((g) => (
                    <Button key={g} type="button" variant={genre===g?'default':'outline'} className={cn('rounded-xl', genre===g?'bg-gradient-to-r from-purple-600 to-blue-600 text-white':'')} onClick={()=>setGenre(g)} disabled={loading}>{g}</Button>
                  ))}
                </div>
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">Pilih Kelompok Usia</label>
                <div className="grid grid-cols-3 gap-2">
                  {['2-4','4-6','6-8','8-10','10-12','12-14'].map((a)=>(
                    <Button key={a} type="button" variant={ageGroup===a?'default':'outline'} className={cn('rounded-xl', ageGroup===a?'bg-gradient-to-r from-purple-600 to-blue-600 text-white':'')} onClick={()=>setAgeGroup(a)} disabled={loading}>{a}</Button>
                  ))}
                </div>
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">Detail Cerita - Ide Plot</label>
                <Textarea rows={3} value={storyIdea} onChange={(e)=>setStoryIdea(e.target.value)} placeholder="Contoh: Seekor anak kucing pemberani yang ingin belajar terbang..." disabled={loading} />
                <div className="mt-2 flex gap-2">
                  <Button type="button" onClick={handleRandomIdea} className="rounded-xl bg-gradient-to-r from-pink-500 to-rose-500 text-white" disabled={loading}><Dice5 className="mr-2 h-4 w-4"/>Ide Acak</Button>
                  <Button type="button" onClick={handleDevelop} className="rounded-xl bg-gradient-to-r from-purple-500 to-violet-500 text-white" disabled={loading}><Lightbulb className="mr-2 h-4 w-4"/>Kembangkan</Button>
                </div>
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">Jelaskan Karakter (opsional)</label>
                <Textarea rows={2} value={characterDesc} onChange={(e)=>setCharacterDesc(e.target.value)} placeholder="Contoh: Kiki, kucing oranye ceria & ceroboh. Budi, burung hantu bijaksana." disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">Pelajaran/Moral (opsional)</label>
                <Textarea rows={2} value={moralLesson} onChange={(e)=>setMoralLesson(e.target.value)} placeholder="Contoh: Pentingnya keberanian untuk mencoba hal baru." disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">Percakapan</label>
                <div className="grid grid-cols-4 gap-2">
                  {(['ID','EN','JV','ES','FR','ZH','DE','AR'] as const).map((l)=>(
                    <Button key={l} type="button" variant={language===l?'default':'outline'} className={cn('rounded-xl', language===l?'bg-gradient-to-r from-purple-600 to-blue-600 text-white':'')} onClick={()=>setLanguage(l)} disabled={loading}>{l}</Button>
                  ))}
                </div>
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">Pilihan Prompt</label>
                <div className="grid grid-cols-2 gap-2">
                  <Button type="button" variant={promptLanguage==='JSON'?'default':'outline'} className={cn('rounded-xl', promptLanguage==='JSON'?'bg-gradient-to-r from-purple-600 to-blue-600 text-white':'')} onClick={()=>setPromptLanguage('JSON')} disabled={loading}>Enhanced JSON Prompt (English)</Button>
                  <div className="grid grid-cols-2 gap-2">
                    <Button type="button" variant={promptLanguage==='EN'?'default':'outline'} className={cn('rounded-xl', promptLanguage==='EN'?'bg-gradient-to-r from-purple-600 to-blue-600 text-white':'')} onClick={()=>setPromptLanguage('EN')} disabled={loading}>EN Prompt</Button>
                    <Button type="button" variant={promptLanguage==='ID'?'default':'outline'} className={cn('rounded-xl', promptLanguage==='ID'?'bg-gradient-to-r from-purple-600 to-blue-600 text-white':'')} onClick={()=>setPromptLanguage('ID')} disabled={loading}>ID Prompt</Button>
                  </div>
                </div>
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">Jumlah Scene</label>
                <Input type="number" min={1} max={100} value={numScenes} onChange={(e)=>setNumScenes(parseInt(e.target.value || '1',10))} disabled={loading} />
              </div>
              <div className="pt-2">
                <Button onClick={handleGenerate} className="w-full rounded-2xl bg-gradient-to-r from-purple-600 to-blue-600 text-white" disabled={loading}>{loading?<Loader2 className="h-4 w-4 animate-spin"/>:<Wand2 className="h-4 w-4"/>} <span className="ml-2">Buat Prompt Detail</span></Button>
              </div>
            </CardContent>
          </Card>

          {/* Kanan */}
          <Card className="lg:col-span-3">
            <CardHeader><CardTitle>Hasil Prompt Detail</CardTitle></CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                {stat('Scene', scenes.length? String(scenes.length):'-')}
                {stat('Durasi', scenes.length? `${scenes.length*8} detik`:'-')}
                {stat('Dibuat', scenes.length? new Date().toLocaleDateString('id-ID'):'-')}
                {stat('Genre', genre || '-')}
              </div>
              <Separator />
              {!loading && scenes.length===0?(
                <div className="py-16 text-center text-muted-foreground">Hasil detail prompt per-scene akan muncul di sini.</div>
              ):null}
              {loading?(
                <div className="py-16 text-center"><div className="mx-auto h-14 w-14 animate-spin rounded-full border-4 border-primary/30 border-t-primary"/></div>
              ):null}
              {scenes.length>0? (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                  {scenes.map((s,idx)=>(
                    <div key={idx} className="rounded-2xl border bg-card p-4 shadow-sm bg-gradient-to-b from-purple-600/15 via-blue-600/10 to-background">
                      <div className="mb-2 text-primary">🎞️</div>
                      <h3 className="text-lg font-semibold">Scene {idx+1}</h3>
                      <p className="mt-1 text-xs text-muted-foreground">Durasi 8 Detik</p>
                      <div className="mt-4 flex gap-2">
                        <Button variant="default" className="flex-1 rounded-xl bg-gradient-to-r from-purple-600 to-blue-600 text-white" onClick={()=>{ setSceneDialogText(buildSceneText(s)); setSceneDialogOpen(true) }}>Lihat Prompt</Button>
                        <Button variant="outline" className="flex-1 rounded-xl" onClick={()=>{ navigator.clipboard.writeText(buildSceneText(s)); toast({ title:'Disalin', description:'Prompt scene berhasil disalin.' }) }}>Copy</Button>
                      </div>
                    </div>
                  ))}
                </div>
              ):null}
              <Separator />
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-2">
                <Button onClick={handleScript} className="rounded-2xl bg-gradient-to-r from-purple-600 to-blue-600 text-white">Buat Naskah Lengkap dengan AI</Button>
                <Button asChild variant="secondary" className="rounded-2xl"><Link href="/history?tool=storyprompt"><History className="h-4 w-4 mr-2"/>Riwayat Prompt</Link></Button>
                <Button variant="outline" className="rounded-2xl" onClick={handleAnalyze}>Analisis Kelayakan</Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Dialog Analisis */}
        <Dialog open={analysisOpen} onOpenChange={setAnalysisOpen}>
          <DialogContent className="rounded-2xl sm:max-w-xl">
            <DialogHeader><DialogTitle>Analisis Kelayakan</DialogTitle></DialogHeader>
            {analysis? (
              <pre className="bg-muted p-3 rounded-xl text-xs whitespace-pre-wrap">{JSON.stringify(analysis,null,2)}</pre>
            ): (
              <div className="py-10 text-center text-muted-foreground">Memuat…</div>
            )}
          </DialogContent>
        </Dialog>

        {/* Dialog Scene Prompt */}
        <Dialog open={sceneDialogOpen} onOpenChange={setSceneDialogOpen}>
          <DialogContent className="rounded-2xl sm:max-w-xl">
            <DialogHeader><DialogTitle>Detail Prompt Scene</DialogTitle></DialogHeader>
            <Textarea readOnly value={sceneDialogText} className="h-48 bg-muted" />
            <div className="text-right">
              <Button className="rounded-xl" onClick={()=>{ navigator.clipboard.writeText(sceneDialogText); toast({ title:'Disalin', description:'Prompt scene berhasil disalin.' }) }}>Salin</Button>
            </div>
          </DialogContent>
        </Dialog>

        {/* Dialog Naskah */}
        <Dialog open={scriptOpen} onOpenChange={setScriptOpen}>
          <DialogContent className="rounded-2xl sm:max-w-xl">
            <DialogHeader><DialogTitle>Naskah Lengkap</DialogTitle></DialogHeader>
            <pre className="bg-muted p-3 rounded-xl text-xs whitespace-pre-wrap">{scriptText}</pre>
          </DialogContent>
        </Dialog>

      </div>
    </section>
  )
}


