"use client"

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Separator } from '@/components/ui/separator'
// Alert dihilangkan; gunakan toast/snackbar saja untuk error
// Gunakan sumber toast yang sama dengan Toaster (hooks/use-toast)
import { toast } from '@/hooks/use-toast'
import { cn } from '@/lib/utils'
import { Loader2, Film, ImageIcon, Plus, Download, History, RotateCcw } from 'lucide-react'

type SceneDetail = {
  scene: number
  prompt_detail_id?: Record<string, string>
  prompt_detail_en?: Record<string, string>
}

const keyMapId: Record<string, string> = {
  visual_style: 'A. GAYA VISUAL',
  core_scene_description: 'B. DESKRIPSI ADEGAN INTI',
  cinematography: 'C. SINEMATOGRAFI (KAMERA & LENSA)',
  lighting_and_color: 'D. PENCAHAYAAN & WARNA',
  dialogue_and_audio: 'E. DIALOG & AUDIO',
  educational_focus: 'F. FOKUS PEMBELAJARAN',
  final_instructions: 'G. INSTRUKSI AKHIR & PROMPT NEGATIF',
}

const keyMapEn: Record<string, string> = {
  visual_style: 'A. VISUAL STYLE',
  core_scene_description: 'B. CORE SCENE DESCRIPTION',
  cinematography: 'C. CINEMATOGRAPHY (CAMERA & LENS)',
  lighting_and_color: 'D. LIGHTING & COLOR',
  dialogue_and_audio: 'E. DIALOGUE & AUDIO',
  educational_focus: 'F. EDUCATIONAL FOCUS / LEARNING OBJECTIVE',
  final_instructions: 'G. FINAL INSTRUCTIONS & NEGATIVE PROMPT',
}

function extractJSON(text?: string): any | null {
  if (!text) return null
  const cleaned = text.replace(/^```[\s\S]*?\n|```$/g, '')
  const start = cleaned.indexOf('{')
  const end = cleaned.lastIndexOf('}')
  if (start === -1 || end === -1 || end <= start) return null
  try {
    return JSON.parse(cleaned.slice(start, end + 1))
  } catch {
    return null
  }
}

function formatDurationID(totalSeconds: number): string {
  if (!Number.isFinite(totalSeconds) || totalSeconds < 0) return '-'
  const s = Math.floor(totalSeconds)
  const hours = Math.floor(s / 3600)
  const minutes = Math.floor((s % 3600) / 60)
  const seconds = s % 60
  const parts: string[] = []
  if (hours > 0) parts.push(`${hours} jam`)
  if (minutes > 0) parts.push(`${minutes} menit`)
  if (seconds > 0 && hours === 0) parts.push(`${seconds} detik`)
  // Jika ada jam, biasanya detik tidak krusial ? tampilkan jam & menit saja
  if (parts.length === 0) return '0 detik'
  return parts.join(', ')
}

export default function MotionpromptPage() {
  const [subject, setSubject] = useState('IPA')
  const [grade, setGrade] = useState('PAUD/TK')
  const [style, setStyle] = useState<'3D Animation' | '2D Animation'>('3D Animation')
  const [learningObjective, setLearningObjective] = useState('')
  const [topic, setTopic] = useState('')
  const [story, setStory] = useState('')
  const [sceneCount, setSceneCount] = useState(3)
  const [negative, setNegative] = useState('')
  const [loading, setLoading] = useState(false)
  // Tidak menyimpan error di state; tampilkan via toast/snackbar saja
  const [scenes, setScenes] = useState<SceneDetail[]>([])
  const [totalRequested, setTotalRequested] = useState(3)
  const [aspectRatio] = useState('16:9')

  const [detailOpen, setDetailOpen] = useState(false)
  const [detailScene, setDetailScene] = useState<SceneDetail | null>(null)
  const [imageOpen, setImageOpen] = useState(false)
  const [imagePrompt, setImagePrompt] = useState('')


  const callApi = async (prompt: string) => {
    const res = await fetch('/api/motion/generate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt }),
    })
    const json = await res.json()
    if (!res.ok) throw new Error(json.error || 'API error')
    return json.text as string
  }

  const showError = (message: string) => {
    toast({ variant: 'destructive', title: 'Terjadi Kesalahan', description: message })
  }

  const buildGeneratePrompt = (start: number, num: number) => {
    const context = scenes.length ? `CONTEXT: Previously generated scenes: ${JSON.stringify(scenes)}.` : ''
    return `
TASK: Generate ${num} detailed animation prompt(s), starting from scene number ${start}. ${context}
INSTRUCTIONS: For each new scene, create a JSON object with a "scene" number and two nested objects: "prompt_detail_id" (for Indonesian) and "prompt_detail_en" (for English). Each nested object MUST contain these 7 keys: "visual_style", "core_scene_description", "cinematography", "lighting_and_color", "dialogue_and_audio", "educational_focus", "final_instructions".
- "visual_style": Use this exact value: "${style}"
- "core_scene_description": Describe the scene's action, setting, characters, and their expressions based on topic "${topic.trim()}" and story "${story.trim() || 'N/A'}".
- "cinematography": creative camera work.
- "lighting_and_color": creative lighting and color.
- "dialogue_and_audio": Dialogue MUST be in Indonesian for BOTH prompt_detail_id and prompt_detail_en objects.
- "educational_focus": Use this exact value: "${learningObjective.trim()}"
- "final_instructions": Base: "Ensure the scene is joyful and curiosity-inducing for elementary school students." Add negative: "${negative.trim()}".
Ensure the 'scene' number is correctly incremented starting from ${start} and that the story is continuous.
OUTPUT_FORMAT: Strict JSON only.
{"scenes": [{"scene": ${start}, "prompt_detail_id": {...}, "prompt_detail_en": {...}}, ...]}`
  }

  const fetchScenes = async (start: number, num: number) => {
    const prompt = buildGeneratePrompt(start, num)
    const text = await callApi(prompt)
    const parsed = extractJSON(text)
    const newScenes: SceneDetail[] = parsed?.scenes || []
    setScenes((prev) => [...prev, ...newScenes])
    return newScenes.length > 0
  }

  const handleGenerate = async () => {
    if (!learningObjective.trim()) return showError('Tujuan Pembelajaran wajib diisi.')
    if (!topic.trim()) return showError('Materi Pembelajaran wajib diisi.')
    setScenes([])
    setTotalRequested(sceneCount)
    setLoading(true)
    try {
      const ok = await fetchScenes(1, Math.min(3, sceneCount))
      if (!ok) showError('AI tidak mengembalikan hasil.')
    } catch (e: any) {
      showError(e?.message || 'Gagal menghubungi AI.')
    } finally {
      setLoading(false)
    }
  }

  const handleLoadMore = async () => {
    const nextStart = scenes.length + 1
    const remaining = totalRequested - scenes.length
    if (remaining <= 0) return
    setLoading(true)
    try {
      await fetchScenes(nextStart, Math.min(3, remaining))
    } catch (e: any) {
      showError(e?.message || 'Gagal memuat scene berikutnya.')
    } finally {
      setLoading(false)
    }
  }

  const handleRandomIdea = async () => {
    if (!topic.trim()) return showError('Isi Materi Pembelajaran terlebih dahulu.')
    const p = `TASK: Generate one creative story idea (max 20 words). TOPIC: "${topic}". GRADE: ${grade}.`
    setLoading(true)
    try {
      const text = await callApi(p)
      setStory((text || '').trim())
    } catch (e: any) {
      showError(e?.message || 'Gagal menghubungi AI.')
    } finally {
      setLoading(false)
    }
  }

  const openPromptDetail = (s: SceneDetail) => {
    setDetailScene(s)
    setDetailOpen(true)
  }

  const openImagePrompt = (s: SceneDetail) => {
    const desc = s.prompt_detail_en?.core_scene_description || ''
    const vs = s.prompt_detail_en?.visual_style || style
    const text = `${desc}, ${vs}, in the style of a children's educational animation, cinematic lighting, high detail, masterpiece, aspect ratio ${aspectRatio}`
    setImagePrompt(text)
    setImageOpen(true)
  }

  const formatSceneForTxtLocale = (
    s: SceneDetail,
    map: Record<string, string>,
    data?: Record<string, string>,
  ) => {
    const lines: string[] = []
    lines.push('-----------------')
    lines.push(` Scene ${s.scene}`)
    lines.push('-----------------')
    const d = data || {}
    Object.keys(map).forEach((k) => {
      const label = map[k]
      const val = (d as any)[k] || '-'
      lines.push(`${label}:`)
      lines.push(String(val))
      lines.push('')
    })
    return lines.join('\n')
  }

  const handleSavePrompts = () => {
    if (!scenes.length) {
      toast({ variant: 'destructive', title: 'Tidak ada data', description: 'Buat prompt terlebih dahulu.' })
      return
    }
    const sorted = [...scenes].sort((a, b) => a.scene - b.scene)
    const headerId = [
      '=== Motion Prompt (Indonesia) ===',
      `Mata Pelajaran: ${subject || '-'}`,
      `Jenjang: ${grade || '-'}`,
      `Gaya: ${style}`,
      `Materi: ${topic || '-'}`,
      `Tujuan Pembelajaran: ${learningObjective || '-'}`,
      `Jumlah Adegan: ${scenes.length}`,
      `Estimasi Durasi: ${formatDurationID(scenes.length * 8)}`,
      '====================\n\n',
      '',
    ].join('\n')
    const headerEn = [
      '=== Motion Prompt (English) ===',
      `Subject: ${subject || '-'}`,
      `Grade: ${grade || '-'}`,
      `Style: ${style}`,
      `Topic: ${topic || '-'}`,
      `Learning Objective: ${learningObjective || '-'}`,
      `Total Scenes: ${scenes.length}`,
      `Estimated Duration: ${formatDurationID(scenes.length * 8)}`,
      '====================\n\n',
      '',
    ].join('\n')
    const bodyId = sorted
      .map((s) => formatSceneForTxtLocale(s, keyMapId, s.prompt_detail_id))
      .join('\n\n')
    const bodyEn = sorted
      .map((s) => formatSceneForTxtLocale(s, keyMapEn, s.prompt_detail_en))
      .join('\n\n')
    const contentId = headerId + bodyId
    const contentEn = headerEn + bodyEn
    const ts = new Date()
      .toISOString()
      .replace(/[:T]/g, '-')
      .slice(0, 19)
    const safeTopic = (topic || 'prompt').toLowerCase().replace(/[^a-z0-9-_]+/g, '-')
    const download = (name: string, content: string) => {
      const blob = new Blob([content], { type: 'text/plain;charset=utf-8' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = name
      document.body.appendChild(a)
      a.click()
      a.remove()
      URL.revokeObjectURL(url)
    }
    download(`motionprompt-${safeTopic}-${scenes.length}scene-${ts}-id.txt`, contentId)
    download(`motionprompt-${safeTopic}-${scenes.length}scene-${ts}-en.txt`, contentEn)
    toast({ title: 'Prompt disimpan', description: `Berhasil mengunduh 2 file untuk ${scenes.length} scene.` })
  }

  const handleReset = () => {
    setSubject('IPA')
    setGrade('PAUD/TK')
    setStyle('3D Animation')
    setLearningObjective('')
    setTopic('')
    setStory('')
    setSceneCount(3)
    setNegative('')
    setScenes([])
    setTotalRequested(3)
    setDetailOpen(false)
    setDetailScene(null)
    setImageOpen(false)
    setImagePrompt('')
    toast({ title: 'Form direset', description: 'Input dan hasil telah dibersihkan.' })
  }


  return (
    <section className="relative">
      <div className="absolute inset-0 -z-10 bg-gradient-to-b from-purple-600/15 via-blue-600/10 to-background" />
      <div className="mx-auto max-w-6xl px-4 py-10">
        <div className="mb-6 text-center">
          <div className="inline-block rounded-2xl bg-card p-4 shadow">
            <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-blue-600">MotionPrompt</h1>
          </div>
          <p className="mt-3 text-muted-foreground">Buat prompt untuk video/animasi pembelajaran secara mudah dan cepat</p>
        </div>
        {/* Alert inline dihapus; error akan muncul via toast/snackbar */}

        <div className="grid gap-6 lg:grid-cols-5">
          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle>Pengaturan Materi</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="mb-2 block text-sm font-medium">1. Mata Pelajaran</label>
                <Input value={subject} onChange={(e) => setSubject(e.target.value)} placeholder="Contoh: IPA" disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">2. Jenjang Kelas</label>
                <div className="flex flex-wrap gap-2">
                  {['PAUD/TK', 'Kelas 1-2', 'Kelas 3-4', 'Kelas 5-6'].map((g) => (
                    <Button key={g} type="button" variant={grade === g ? 'default' : 'outline'} className={cn('rounded-xl', grade === g ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white' : '')} onClick={() => setGrade(g)} disabled={loading}>
                      {g}
                    </Button>
                  ))}
                </div>
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">3. Gaya Animasi</label>
                <div className="grid grid-cols-2 gap-2">
                  {(['3D Animation', '2D Animation'] as const).map((v) => (
                    <Button key={v} type="button" variant={style === v ? 'default' : 'outline'} className={cn('rounded-xl', style === v ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white' : '')} onClick={() => setStyle(v)} disabled={loading}>
                      {v.startsWith('3D') ? <Film className="mr-2 h-4 w-4" /> : <ImageIcon className="mr-2 h-4 w-4" />} {v.replace(' Animation', '')}
                    </Button>
                  ))}
                </div>
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">4. Tujuan Pembelajaran</label>
                <Textarea rows={2} value={learningObjective} onChange={(e) => setLearningObjective(e.target.value)} placeholder="Contoh: Siswa dapat menjelaskan proses terjadinya daur air..." disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">5. Materi Pembelajaran</label>
                <Textarea rows={2} value={topic} onChange={(e) => setTopic(e.target.value)} placeholder="Contoh: Bagian Tubuh dan Panca Indera" disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">6. Kembangkan Materi jadi Cerita (Opsional)</label>
                <Textarea rows={3} value={story} onChange={(e) => setStory(e.target.value)} placeholder="Kembangkan materi menjadi cerita ..." disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">7. Jumlah Adegan</label>
                <Input type="number" min={2} max={10} value={sceneCount} onChange={(e) => setSceneCount(parseInt(e.target.value || '3', 10))} disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">8. Hindari Elemen Ini (Opsional)</label>
                <Textarea rows={2} value={negative} onChange={(e) => setNegative(e.target.value)} placeholder="Contoh: hindari teks, warna monoton" disabled={loading} />
              </div>
              <div className="flex flex-col items-stretch gap-3 pt-2">
                <Button
                  type="button"
                  size="lg"
                  onClick={handleGenerate}
                  className="w-full rounded-2xl bg-gradient-to-r from-purple-600 to-blue-600 text-white"
                  disabled={loading}
                >
                  {loading ? (
                    <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                  ) : (
                    <Film className="mr-2 h-5 w-5" />
                  )}
                  <span className="text-base">Buat Prompt</span>
                </Button>
                <Button
                  type="button"
                  size="lg"
                  onClick={handleRandomIdea}
                  variant="secondary"
                  className="w-full rounded-2xl bg-gradient-to-r from-blue-200 to-purple-200 text-indigo-700 border border-indigo-300"
                  disabled={loading}
                >
                  <Plus className="mr-2 h-5 w-5" />
                  <span className="text-base">Ide Acak</span>
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card className="lg:col-span-3">
            <CardHeader>
              <CardTitle>Hasil Prompt Detail</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-3 md:grid-cols-4">
                <Stat label="Scene" value={scenes.length ? String(scenes.length) : '-'} />
                <Stat label="Estimasi" value={scenes.length ? formatDurationID(scenes.length * 8) : '-'} />
                <Stat label="Mapel" value={subject || '-'} />
                <Stat label="Jenjang" value={grade || '-'} />
              </div>
              <Separator />
              {!loading && scenes.length === 0 ? (
                <div className="py-16 text-center text-muted-foreground">
                  <div className="mb-2 inline-flex px-3 py-1 text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-blue-600">Siap memulai</div>
                  <div>Atur parameter di panel kiri, lalu klik Buat Prompt.</div>
                </div>
              ) : null}
              {loading ? (
                <div className="py-16 text-center">
                  <div className="mx-auto h-14 w-14 animate-spin rounded-full border-4 border-primary/30 border-t-primary" />
                  <div className="mt-4 text-muted-foreground">AI sedang menyusun materi...</div>
                </div>
              ) : null}
              {scenes.length > 0 ? (
                <div className="grid grid-cols-1 gap-4 md:grid-cols-2 xl:grid-cols-2 ">
                  {scenes.map((s) => (
                    <div key={s.scene} className="rounded-2xl border bg-card p-4 shadow-sm bg-gradient-to-b from-purple-600/15 via-blue-600/10 to-background">
                      <div className="mb-2 text-primary"><Film className="inline h-5 w-5" /></div>
                      <h3 className="text-lg font-semibold">Scene {s.scene}</h3>
                      <p className="mt-1 text-xs text-muted-foreground">Durasi 8 Detik</p>
                      <div className="mt-4 flex gap-2">
                        <Button variant="default" className="flex-1 rounded-xl bg-gradient-to-r from-purple-600 to-blue-600 text-white" onClick={() => { setDetailScene(s); setDetailOpen(true) }}>Lihat Prompt</Button>
                        <Button variant="outline" className="flex-1 rounded-xl" onClick={() => openImagePrompt(s)}>Prompt Gambar</Button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : null}
              {scenes.length > 0 && scenes.length < totalRequested && !loading ? (
                <div className="text-center py-4 pt-8">
                  <Button onClick={handleLoadMore} variant="secondary" className="rounded-2xl bg-gradient-to-r from-blue-200 to-purple-200 text-indigo-700 border border-indigo-300
">
                    <Plus className="mr-2 h-4 w-4" /> Tampilkan Scene {scenes.length + 1}-{Math.min(scenes.length + 3, totalRequested)}
                  </Button>
                </div>
              ) : null}
              <Separator />
              <div className="flex flex-col items-center gap-3 sm:flex-row sm:justify-center pt-4">
                <Button
                  type="button"
                  className="w-full sm:w-auto min-w-[180px] rounded-2xl bg-gradient-to-r from-purple-600 to-blue-600 text-white"
                  disabled={loading || scenes.length === 0}
                  onClick={handleSavePrompts}
                >
                  <Download className="mr-2 h-4 w-4" />
                  <span className="">Simpan Prompt</span>
                </Button>
                <Button
                  type="button"
                  variant="secondary"
                  className="w-full sm:w-auto min-w-[180px] rounded-2xl bg-gradient-to-r from-blue-200 to-purple-200 text-indigo-700 border border-indigo-300"
                  onClick={handleReset}
                  disabled={loading}
                >
                  <RotateCcw className="mr-2 h-4 w-4" />
                  <span className="">Reset Form</span>
                </Button>
                <Button
                  type="button"
                  variant="secondary"
                  className="w-full sm:w-auto min-w-[180px] rounded-2xl bg-gradient-to-r from-blue-200 to-purple-200 text-indigo-700 border border-indigo-300"
                  disabled={loading}
                  onClick={() => toast({ title: 'Belum tersedia', description: 'Riwayat Prompt belum diimplementasikan.' })}
                >
                  <History className="mr-2 h-4 w-4" />
                  <span className="">Riwayat Prompt</span>
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        <Dialog open={detailOpen} onOpenChange={setDetailOpen}>
          <DialogContent className="rounded-2xl sm:max-w-xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Detail Prompt</DialogTitle>
            </DialogHeader>
            {detailScene ? (
              <div className="space-y-4">
                <DetailBox title="Prompt Detail (Indonesia)" data={detailScene.prompt_detail_id} map={keyMapId} />
                <DetailBox title="Prompt Detail (English)" data={detailScene.prompt_detail_en} map={keyMapEn} />
              </div>
            ) : null}
          </DialogContent>
        </Dialog>

        <Dialog open={imageOpen} onOpenChange={setImageOpen}>
          <DialogContent className="rounded-2xl sm:max-w-xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Prompt Gambar</DialogTitle>
            </DialogHeader>
            <Textarea readOnly value={imagePrompt} className="h-40 bg-muted" />
            <div className="text-right">
              <Button className="rounded-2xl" onClick={() => { navigator.clipboard.writeText(imagePrompt); toast({ title: 'Disalin', description: 'Prompt gambar berhasil disalin.' }) }}>Salin</Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </section>
  )
}

function Stat({ label, value }: { label: string; value: string }) {
  return (
    <div className="rounded-xl border bg-emerald-50 p-3 text-center">
      <div className="text-xs text-muted-foreground">{label}</div>
      <div className="text-xl font-semibold text-emerald-700">{value}</div>
    </div>
  )
}

function DetailBox({ title, data, map }: { title: string; data?: Record<string, string>; map: Record<string, string> }) {
  const all = data || {}
  const lines = Object.keys(map).map((k) => `${map[k]}: \n${all[k] || '-'}`)
  const text = `${lines.join('\n\n')}`
  return (
    <div className="rounded-xl border p-3">
      <div className="mb-2 flex items-center justify-between">
        <div className="text-sm font-semibold">{title}</div>
        <Button
          size="sm"
          className="rounded-xl"
          onClick={() =>
            navigator.clipboard
              .writeText(text)
              .then(() => toast({ title: 'Disalin', description: 'Prompt berhasil disalin.' }))
          }
        >
          Salin
        </Button>
      </div>
      <div className="space-y-2">
        {Object.keys(map).map((k) => (
          <p key={k} className="text-sm">
            <strong className="block font-medium">{map[k]}:</strong>{' '}
            <span className="text-muted-foreground">{all[k] || '-'}</span>
          </p>
        ))}
      </div>
    </div>
  )
}

