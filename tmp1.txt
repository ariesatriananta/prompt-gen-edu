"use client"

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Separator } from '@/components/ui/separator'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { toast } from '@/components/ui/use-toast'
import { cn } from '@/lib/utils'
import { Loader2, Film, ImageIcon, Plus, Download, History } from 'lucide-react'

type SceneDetail = {
  scene: number
  prompt_detail_id?: Record<string, string>
  prompt_detail_en?: Record<string, string>
}

const keyMapId: Record<string, string> = {
  visual_style: 'A. GAYA VISUAL',
  core_scene_description: 'B. DESKRIPSI ADEGAN INTI',
  cinematography: 'C. SINEMATOGRAFI (KAMERA & LENSA)',
  lighting_and_color: 'D. PENCAHAYAAN & WARNA',
  dialogue_and_audio: 'E. DIALOG & AUDIO',
  educational_focus: 'F. FOKUS PEMBELAJARAN',
  final_instructions: 'G. INSTRUKSI AKHIR & PROMPT NEGATIF',
}

const keyMapEn: Record<string, string> = {
  visual_style: 'A. VISUAL STYLE',
  core_scene_description: 'B. CORE SCENE DESCRIPTION',
  cinematography: 'C. CINEMATOGRAPHY (CAMERA & LENS)',
  lighting_and_color: 'D. LIGHTING & COLOR',
  dialogue_and_audio: 'E. DIALOGUE & AUDIO',
  educational_focus: 'F. EDUCATIONAL FOCUS / LEARNING OBJECTIVE',
  final_instructions: 'G. FINAL INSTRUCTIONS & NEGATIVE PROMPT',
}

function extractJSON(text?: string): any | null {
  if (!text) return null
  const cleaned = text.replace(/^```[\s\S]*?\n|```$/g, '')
  const start = cleaned.indexOf('{')
  const end = cleaned.lastIndexOf('}')
  if (start === -1 || end === -1 || end <= start) return null
  try {
    return JSON.parse(cleaned.slice(start, end + 1))
  } catch {
    return null
  }
}

export default function MotionpromptPage() {
  const [subject, setSubject] = useState('IPA')
  const [grade, setGrade] = useState('PAUD/TK')
  const [style, setStyle] = useState<'3D Animation' | '2D Animation'>('3D Animation')
  const [learningObjective, setLearningObjective] = useState('')
  const [topic, setTopic] = useState('')
  const [story, setStory] = useState('')
  const [sceneCount, setSceneCount] = useState(3)
  const [negative, setNegative] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [scenes, setScenes] = useState<SceneDetail[]>([])
  const [totalRequested, setTotalRequested] = useState(3)
  const [aspectRatio] = useState('16:9')

  const [detailOpen, setDetailOpen] = useState(false)
  const [detailScene, setDetailScene] = useState<SceneDetail | null>(null)
  const [imageOpen, setImageOpen] = useState(false)
  const [imagePrompt, setImagePrompt] = useState('')

  const callApi = async (prompt: string) => {
    const res = await fetch('/api/motion/generate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt }),
    })
    const json = await res.json()
    if (!res.ok) throw new Error(json.error || 'API error')
    return json.text as string
  }

  const buildGeneratePrompt = (start: number, num: number) => {
    const context = scenes.length ? `CONTEXT: Previously generated scenes: ${JSON.stringify(scenes)}.` : ''
    return `
TASK: Generate ${num} detailed animation prompt(s), starting from scene number ${start}. ${context}
INSTRUCTIONS: For each new scene, create a JSON object with a "scene" number and two nested objects: "prompt_detail_id" (for Indonesian) and "prompt_detail_en" (for English). Each nested object MUST contain these 7 keys: "visual_style", "core_scene_description", "cinematography", "lighting_and_color", "dialogue_and_audio", "educational_focus", "final_instructions".
- "visual_style": Use this exact value: "${style}"
- "core_scene_description": Describe the scene's action, setting, characters, and their expressions based on topic "${topic.trim()}" and story "${story.trim() || 'N/A'}".
- "cinematography": creative camera work.
- "lighting_and_color": creative lighting and color.
- "dialogue_and_audio": Dialogue MUST be in Indonesian for BOTH prompt_detail_id and prompt_detail_en objects.
- "educational_focus": Use this exact value: "${learningObjective.trim()}"
- "final_instructions": Base: "Ensure the scene is joyful and curiosity-inducing for elementary school students." Add negative: "${negative.trim()}".
Ensure the 'scene' number is correctly incremented starting from ${start} and that the story is continuous.
OUTPUT_FORMAT: Strict JSON only.
{"scenes": [{"scene": ${start}, "prompt_detail_id": {...}, "prompt_detail_en": {...}}, ...]}`
  }

  const fetchScenes = async (start: number, num: number) => {
    const prompt = buildGeneratePrompt(start, num)
    const text = await callApi(prompt)
    const parsed = extractJSON(text)
    const newScenes: SceneDetail[] = parsed?.scenes || []
    setScenes((prev) => [...prev, ...newScenes])
    return newScenes.length > 0
  }

  const handleGenerate = async () => {
    if (!learningObjective.trim()) return toast({ variant: 'destructive', title: 'Lengkapi data', description: 'Tujuan Pembelajaran wajib diisi.' })
    if (!topic.trim()) return toast({ variant: 'destructive', title: 'Lengkapi data', description: 'Materi Pembelajaran wajib diisi.' })
    setScenes([])
    setTotalRequested(sceneCount)
    setLoading(true)
    try {
      const ok = await fetchScenes(1, Math.min(3, sceneCount))
      if (!ok) toast({ variant: 'destructive', title: 'Gagal', description: 'AI tidak mengembalikan hasil.' })
    } catch (e: any) {
      toast({ variant: 'destructive', title: 'Gagal', description: e?.message || 'Gagal menghubungi AI.' })
    } finally {
      setLoading(false)
    }
  }

  const handleLoadMore = async () => {
    const nextStart = scenes.length + 1
    const remaining = totalRequested - scenes.length
    if (remaining <= 0) return
    setLoading(true)
    try {
      await fetchScenes(nextStart, Math.min(3, remaining))
    } finally {
      setLoading(false)
    }
  }

  const handleRandomIdea = async () => {
    if (!topic.trim()) return toast({ variant: 'destructive', title: 'Lengkapi data', description: 'Isi Materi Pembelajaran terlebih dahulu.' })
    const p = `TASK: Generate one creative story idea (max 20 words). TOPIC: "${topic}". GRADE: ${grade}.`
    setLoading(true)
    try {
      const text = await callApi(p)
      setStory((text || '').trim())
    } catch (e: any) {
      toast({ variant: 'destructive', title: 'Gagal', description: e?.message || 'Gagal menghubungi AI.' })
    } finally {
      setLoading(false)
    }
  }

  const openPromptDetail = (s: SceneDetail) => {
    setDetailScene(s)
    setDetailOpen(true)
  }

  const openImagePrompt = (s: SceneDetail) => {
    const desc = s.prompt_detail_en?.core_scene_description || ''
    const vs = s.prompt_detail_en?.visual_style || style
    const text = `${desc}, ${vs}, in the style of a children's educational animation, cinematic lighting, high detail, masterpiece, aspect ratio ${aspectRatio}`
    setImagePrompt(text)
    setImageOpen(true)
  }


  return (
    <section className="relative">
      <div className="absolute inset-0 -z-10 bg-gradient-to-b from-purple-600/15 via-blue-600/10 to-background" />
      <div className="mx-auto max-w-6xl px-4 py-10">
        <div className="mb-6 text-center">
          <div className="inline-block rounded-2xl bg-card p-4 shadow">
            <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-blue-600">Veo 3 Prompt Generator</h1>
          </div>
          <p className="mt-3 text-muted-foreground">Buat naskah scene edukasi untuk anak.</p>
        </div>
        {error ? (
          <div className="mx-auto mb-6 max-w-3xl">
            <Alert variant="destructive" className="rounded-2xl">
              <AlertTitle>Terjadi Kesalahan</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          </div>
        ) : null}

        <div className="grid gap-6 lg:grid-cols-5">
          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle>Pengaturan Materi</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="mb-2 block text-sm font-medium">1. Mata Pelajaran</label>
                <Input value={subject} onChange={(e) => setSubject(e.target.value)} placeholder="Contoh: IPA" disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">2. Jenjang Kelas</label>
                <div className="flex flex-wrap gap-2">
                  {['PAUD/TK', 'Kelas 1-2', 'Kelas 3-4', 'Kelas 5-6'].map((g) => (
                    <Button key={g} type="button" variant={grade === g ? 'default' : 'outline'} className={cn('rounded-xl', grade === g ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white' : '')} onClick={() => setGrade(g)} disabled={loading}>
                      {g}
                    </Button>
                  ))}
                </div>
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">3. Gaya Animasi</label>
                <div className="grid grid-cols-2 gap-2">
                  {(['3D Animation', '2D Animation'] as const).map((v) => (
                    <Button key={v} type="button" variant={style === v ? 'default' : 'outline'} className={cn('rounded-xl', style === v ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white' : '')} onClick={() => setStyle(v)} disabled={loading}>
                      {v.startsWith('3D') ? <Film className="mr-2 h-4 w-4" /> : <ImageIcon className="mr-2 h-4 w-4" />} {v.replace(' Animation', '')}
                    </Button>
                  ))}
                </div>
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">4. Tujuan Pembelajaran</label>
                <Textarea rows={2} value={learningObjective} onChange={(e) => setLearningObjective(e.target.value)} placeholder="Contoh: Siswa dapat menjelaskan proses terjadinya daur air..." disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">5. Materi Pembelajaran</label>
                <Textarea rows={2} value={topic} onChange={(e) => setTopic(e.target.value)} placeholder="Contoh: Bagian Tubuh dan Panca Indera" disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">6. Kembangkan Materi jadi Cerita (Opsional)</label>
                <Textarea rows={3} value={story} onChange={(e) => setStory(e.target.value)} placeholder="Kembangkan materi menjadi cerita ..." disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">7. Jumlah Adegan</label>
                <Input type="number" min={2} max={10} value={sceneCount} onChange={(e) => setSceneCount(parseInt(e.target.value || '3', 10))} disabled={loading} />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium">8. Hindari Elemen Ini (Opsional)</label>
                <Textarea rows={2} value={negative} onChange={(e) => setNegative(e.target.value)} placeholder="Contoh: hindari teks, warna monoton" disabled={loading} />
              </div>
              <div className="flex flex-col gap-3 pt-2 sm:flex-row">
                <Button onClick={handleGenerate} className="rounded-2xl bg-gradient-to-r from-purple-600 to-blue-600 text-white" disabled={loading}>
                  {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Film className="mr-2 h-4 w-4" />} Buat Prompt
                </Button>
                <Button onClick={handleRandomIdea} variant="secondary" className="rounded-2xl" disabled={loading}>
                  <Plus className="mr-2 h-4 w-4" /> Ide Acak
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card className="lg:col-span-3">
            <CardHeader>
              <CardTitle>Hasil Prompt Detail</CardTitle>
            </CardHeader>
